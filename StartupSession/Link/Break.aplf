 msg←{opts}Break nss;defopts;link;linked;links;mask;missing;ns;refs;there;tobreak;unlinked;⎕IO;⎕ML;i;all;setconfig;DEBUG;nohold
 ⍝ Use Break # to break all links
 ⍝ opts.exact=0 (default) : break all links below argument namespaces
 ⍝ opts.exact=1 (-exact)  : break all links matching arguments namespaces - but not their children if they are linked to other directories
 ⍝ opts.all=0 (default)   : break specified links
 ⍝ opts.all=1 (-all)      : break all links
 ⎕IO ⎕ML←1 1
 preProcessOpts ⍝ Make sure opts is a namespace
 (msg setconfig)←Config.GetConfig opts
 →(0≠≢msg)⍴0
 :If 2=DEBUG←{6::0 ⋄ ⍵.Debug.debug}setconfig
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     →(nohold←(''⍴1↓⎕XSI)∊'⎕SE.Link.Expunge' '⎕SE.Link.OnAfterFix')⍴NOHOLD
     :Hold ⊂'⎕SE.Link.Links'  ⍝ Expunge already has the hold
NOHOLD:
         :If 0∊⍴links←U.ErrorIfRestored U.GetLinks ⋄ msg←'Not linked: ',,⍕nss ⋄ :Return ⋄ :EndIf
         linked←⍎¨links.ns

         (defopts←⎕NS ⍬).(all recursive)←0 'error'
         opts←defopts U.DefaultOpts opts
         :If ~(⊂,opts.all)∊,¨0 1 '#' '⎕SE' '*' ⋄ U.Error'Invalid value ',(⍕opts.all),' for modifier "all" - must be one of: 0 1 # ⎕SE *'
         :ElseIf ~(⊂opts.recursive)∊'on' 'off' 'error' ⋄ U.Error'Invalid value ',(⍕opts.recursive),' for modifier "recursive" - must be one of: on off error'
         :EndIf

         tobreak←unlinked←missing←0⍴#

         there←⊃⎕RSI ⎕XSI U.ContainerNs ⍬         ⍝ reference to calling namespace
         :If ''≡0⍴nss ⋄ nss←⊂nss ⋄ :EndIf  ⍝ ⊆ would enclose vector of namespaces
         refs←there(0 U.GetRefTo)U.OnEach nss  ⍝ turn into references
         missing,←(0=≢¨refs)/nss ⋄ refs←(0⍴#),(0<≢¨refs)/refs  ⍝ ⍬ for reference not found - ensure prototype is ref

         all←(0 1 1 2 3 ¯1)[(,¨0 1 '#' '⎕SE' '*')⍳⊂,opts.all]
         :If all=¯1
             U.Error '''all'' flag must be one of ''#'' ''⎕SE'' ''*'''
         :ElseIf all≠0 ⍝ Any kind of "all" option?
             tobreak←(∨⌿((2 2⊤all)/⎕SE #)∘.U.IsParent linked)/linked ⍝ break children of either ⎕SE, #, or both
         :ElseIf 0∊⍴refs
             tobreak←refs
         :ElseIf opts.recursive≡'on'
             tobreak←(∨⌿refs∘.U.IsParent linked)/linked  ⍝ break namespaces and children
         :ElseIf (⊂opts.recursive)∊'off' 'error'
             tobreak←(∨⌿refs∘.=linked)/linked  ⍝ break exact namespaces only
             :If opts.recursive≡'error'
             :AndIf (~0∊⍴tobreak)∧(~0∊⍴linked~refs)
             :AndIf ∨/mask←∨/tobreak∘.U.IsParent(linked~refs) ⍝ trying to break a parent of a link that remains
                 U.Error'Cannot break children namespaces linked to their own directories - set ''recursive'' flag to ''on'' or ''off'': ',U.List mask/tobreak
             :EndIf
         :Else
             U.Error'''recursive'' flag must be one of ''on'' ''off'' ''error'''
         :EndIf
         unlinked,←refs~tobreak

         :If ~0∊⍴tobreak  ⍝ stop the file watcher
             →nohold⍴NOHOLD2
             :Hold '⎕SE.Link.Notify'  ⍝ about to change file ties
 NOHOLD2:
                 ⍝ because we're :Hold-ing '⎕SE.Link.Notify' '⎕SE.Link.Links', the Notify events will happen after we're done breaking the link
                 1 U.Break∪(mask←linked∊tobreak)/links  ⍝ will ⎕DL slightly - unti because we know they exist
                 U.SetLinks(~mask)/links
             :EndHold
         :EndIf
         ⍝:Trap 517 ⋄ {⎕SIGNAL ⍵}517 ⋄ :EndTrap ⍝ Flush association table given by 5176⌶⍬

         msg←''
         :If ×≢tobreak ⋄ msg,←⊂'Unlinked:',U.List∪tobreak ⋄ :EndIf
         :If ×≢missing ⋄ msg,←⊂'Not found:',U.List∪missing ⋄ :EndIf
         :If ×≢unlinked ⋄ msg,←⊂'Not linked:',U.List∪unlinked ⋄ :EndIf
         :If 0∊⍴msg ⋄ msg←'No link to break in arguments'
         :Else ⋄ msg←1↓U.FmtLines msg
         :EndIf
     :EndHold
 :Else
     U.Resignal 1
 :EndTrap
