:Namespace Watcher
    ⎕IO ⎕ML←1 1
    ⎕CT←0  ⍝ to compare EncodeTS

    DYALOGVERSION←1 .1+.×2↑⊃(//)'.'⎕VFI 2⊃'.'⎕WG'AplVersion'  ⍝ required at ⎕FIX time - can't rely on ##.U
    IS180←18≤DYALOGVERSION
    IS181←18.1≤DYALOGVERSION

    CRAWLER←0                               ⍝ allow using crawler



    ⍝⍝⍝⍝⍝ .Net System.IO.FileSystemWatcher ⍝⍝⍝⍝⍝

    FSWQ←'⎕SE.Link.Watcher.QUEUE'           ⍝ FSW Queue Object name prefix

    TimerEvent←140
    NotifyEvent←7777
    CloseEvent←7778
    Timeout←5000       ⍝ Length of timeout waiting for WatcherThread actions

    ∇ (dotnet dotnetcore)←HasDotNet;⎕USING;ok;msg;type
    ⍝ FileSystemWatcher usable only with v18.0 and later
      dotnet←dotnetcore←0
     
      :If IS180 ⍝ Executed at ⎕FIX time, so can't rely on ##.U
          ⍝ /// Tidy this up when 2250⌶ is available in all supported versions
          :Trap 0
              (type ok msg)←2250⌶⍬ ⍝ Load .NET Bridge I-Beam available from 18.2.44543
              dotnetcore←1=type ⍝ 2=Framework, 0=Not configured. ¯1= not supported
              →(ok∧type>0)/INITIALISED
              :If type>0 ⍝ If .NET configured but failed to load, output a warning
                  ⍝ Except we decided to be silent at this point, by popular request
                  ⍝ ⎕←'Error loading .NET Bridge: ',msg,(0=≢msg)/'(no message returned)'
              :EndIf
              →0
          :EndTrap
     
          :Trap 0 ⍝ No I-Beam available, so try setting ⎕USING and trap errors
              ⎕USING←''        ⍝ Ensure that System is present if at all possible
              dotnetcore←4≠System.Environment.Version.Major
          :EndTrap
     
     INITIALISED:
          :Trap 0
              ⎕USING←',System',(~dotnetcore)/'.dll'
              dotnet←9.6=⎕NC⊂'System.IO.FileSystemWatcher'
          :Else
              dotnet←dotnetcore←0
          :EndTrap
      :EndIf
    ∇

    (DOTNET DOTNETCORE)←HasDotNet ⍝ cache result

    ∇ canwatch←CanWatch         ⍝ FileSystemWatcher or Crawler
      canwatch←CRAWLER∨DOTNET   ⍝ must be evaluated at runtime to allow ⎕SE.Link.Test to change them
    ∇


    ∇ RequeuedEvent(obj event args)
     ⍝ Process events redirected via the timer
      :Select event
      :Case TimerEvent  ⍝ Timer; do nothing for now
      :Case NotifyEvent ⍝ Re-queued Notify event
          obj ##.Notify&args
      :Case CloseEvent  ⍝ We have been asked to go away
          ⎕EX 1⊃args    ⍝ Erase the QUEUE object; WatcherThread will exit from DQ and the :Disposable control structure
      :EndSelect
    ∇

    ∇ WatchEvent(obj args);ct;nargs;timers
     ⍝ Callback for System.IO.FileSystemWatcher instance
     ⍝ Passes info on to ⎕SE.Link.Notify for processing
      {}2501⌶0 ⍝ Reap the thread on exit - triggers mantis 17628
      ⍝{}2502⌶0  ⍝ Discard parked thread - workaround mantis 17628
      nargs←⊂0 ##.U.CaseText⍕args.ChangeType
      nargs,←⊂args.FullPath
      :If 0≠⎕NC⊂'args.OldFullPath'
          nargs,←⊂args.OldFullPath
      :EndIf
      obj ##.Notify&nargs
    ∇

    ∇ WatchError(obj args);link;msg
      :Hold '⎕SE.Link.Links'
          :If 0∊⍴link←##.U.LookupFile obj.Path
              ##.U.Warn'FileSystemWatcher error on non-linked directory: ',obj.Path
          :Else
              msg←'FileSystemWatcher error on directory: ',link.dir,' watching may no longer be reliable.'
              ##.U.Warn msg
          :EndIf
      :EndHold
    ∇

    ∇ WatcherThread args;q;watcher
     ⍝ Run a thread which creates a FileSystemWatcher object
     ⍝ ... makes sure there is a ⎕DQ to allow processing of events
     ⍝ ... and ensures it is disposed of
      :Disposable watcher←MakeWatcher args
          (q←FSWQ,⍕⎕TID)⎕WC'Timer'('Event'('on'∘,¨⍕¨TimerEvent NotifyEvent CloseEvent)'RequeuedEvent')('Interval' 1000)('Data'watcher)
          ⍝ 'Data' for testing purposes.
          watcher.EnableRaisingEvents←1
          ⎕DQ q ⍝ Wait here; q will be ⎕EX'd by Link.Break
          watcher.EnableRaisingEvents←0
          ⎕DL 1 ⍝ Wait for events to stop
      :EndDisposable
    ∇

    ∇ watcher←MakeWatcher args;⎕USING
     ⍝ Return a FileSystemWatcher object
     ⍝ Try .Net Core rather than Framework if non-Windows or DYALOG_NETCORE explicitly set
      ⎕USING←',System',(~DOTNETCORE)/'.dll'
      watcher←⎕NEW System.IO.FileSystemWatcher
      watcher.(Path Filter)←args
      watcher.(onChanged onCreated onDeleted onRenamed)←⊂'WatchEvent'
      watcher.onError←'WatchError'
      watcher.IncludeSubdirectories←1
    ∇




   ⍝⍝⍝⍝⍝ MAIN API ⍝⍝⍝⍝⍝⍝⍝⍝

    ∇ {link}←Watch link;args;end;q;r;tid;z
    ⍝ Set up a file system watcher, return object that will be stored as "fsw" in ⎕SE.Link.Links[i]
      link.fsw←⎕NULL
      :If ~'dir' 'both'∊⍨⊂link.watch
          :Return
      :EndIf
      :If DOTNET
          :Select 1 ⎕NINFO link.dir
          :Case 1 ⍝ directory
              args←link.dir(,'*')
          :Case 2 ⍝ single file
              args←(¯1↓⊃⎕NPARTS link.dir)(,'*')
          :EndSelect
     
          r←MakeWatcher args
          r.EnableRaisingEvents←1
          link.fsw←r
      :ElseIf CRAWLER
          AddCrawler link
      :Else
          ##.U.Error'Cannot watch files'
      :EndIf
    ∇

    ∇ {was_paused}←watch Pause link;fsw;link
    ⍝ pause/resume file watching
    ⍝ returns previous pause state
      :If 9=⎕NC'link.fsw.QUEUE'
          fsw←(⍕link.fsw.QUEUE)⎕WG'Data'
      :Else
          fsw←link.fsw
      :EndIf
      :If fsw≢⎕NULL
          fsw.EnableRaisingEvents←watch
          was_paused←1
      :ElseIf CRAWLER
          watch PauseCrawler link  ⍝ can't hurt if non-crawled link
          was_paused←0
      :EndIf
    ∇
    ∇ paused←Paused link;fsw
    ⍝ report whether file watching is paused
      :If 9=⎕NC'link.fsw.QUEUE'
          fsw←(⍕link.fsw.QUEUE)⎕WG'Data'
      :Else
          fsw←link.fsw
      :EndIf
      :If fsw≢⎕NULL ⋄ paused←{6 90::0 ⋄ ~fsw.EnableRaisingEvents}⍬
      :ElseIf CRAWLER ⋄ paused←~IsCrawlerActive link
      :Else ⋄ paused←0
      :EndIf
    ∇

    ∇ {links}←Break links;end;tids;timer;timers
    ⍝ Cleanly shut down a file system watcher
    ⍝ Called by ⎕SE.Link.Break
      :If CRAWLER ⋄ RemoveCrawler links ⋄ :EndIf  ⍝ can't hurt on empty links or non-crawled links
      :If ~0∊⍴links
      :AndIf ~0∊⍴links←(⎕NULL≢¨links.fsw)/links  ⍝ links that have a FSW
          (⍕¨links.ns)DisposeFSW&¨links.fsw
          links.fsw←⎕NULL
      :EndIf
    ∇

    ∇ {disposed}←nsname DisposeFSW fsw
      ⍝ Do not not call Dispose on thread 0, else if a callback fn is suspended
      ⍝ everything will freeze
     
      disposed←0
      :Trap 0
          :If 0≠⎕NC⊂'fsw.Dispose' ⍝ Don't bother if it is already gone
              fsw.Dispose
              disposed←1
          :EndIf
      :Else
          ##.U.Warn'Trapped error disposing of FSW on ',nsname,' ',⊃⎕DMX.DM
      :EndTrap
    ∇

    ⍝⍝⍝⍝⍝ Crawler ⍝⍝⍝⍝⍝
    ⍝ Crawls BOTH the namespace and the directory
    ⍝ Will always fully crawl when interpreter comes back to descalc

    ⍝ Issues :
    ⍝ - Crawler should ignore -fastLoad ?
    ⍝ - Crawl should be allowed to fail once (race condition) before timer is de-activated (on second failure in a row)
    ⍝ - Comparing source is slow
    ⍝ - Looking for files with 5174⌶ is slow
    ⍝ - To compare sources, APL must NOT be tied to files
    ⍝ - Do a single ⎕NINFO to get timestamps too
    ⍝ - Synchronising the ⎕NINFO with the ⎕NGET

    LOGCRAWLER←1  ⍝ Log crawler-specific internals - undesirable unless debugging the crawler itself

    ∇ time←EncodeTS TS        ⍝ time in seconds
      time←0.001×0 12 31 24 60 60 1000⊥⍉↑⊆TS  ⍝ takes about 14 digits - ⎕CT must be zero
    ∇
    TS_OLD←EncodeTS 0  ⍝ old timestamp
    ∇ ts←TS  ⍝ Time stamp in seconds
      ts←EncodeTS ⎕TS
    ∇

    LINKS←4 0⍴⍬  ⍝ [link items active warned;]
    L_LINK L_ITEMS L_ACTIVE L_WARNED←⍳4
    NO_ITEMS←6 0⍴⍬  ⍝ [file name nc checked filemod filehash;]
    I_FILE I_NAME I_NC I_CHECKED I_FMOD I_FHASH←⍳6
    LASTSTART←LASTEND←TS_OLD

    INTERVAL←3⊣.1    ⍝ Timer interval in seconds
    GRANULARITY←.02  ⍝ Time granularity in seconds - as bad as 20ms on Windows
    WORKLOAD←0.5     ⍝ Crawler maximum workload, in timer intervals


    ∇ timer←CreateTimer;args
    ⍝ create Timer in thread 0, so that timer events will be generated when thread 0 comes back to six-space prompt
      :If 0≠⎕TID ⋄ ⎕←'⎕SE.Link.Watcher namespace must be fixed from thread 0 - crawler may not work properly' ⋄ :EndIf
      args←('Active' 0)('Interval'(⌈1000×INTERVAL))('Event'('onTimer' 'CrawlerEvent'))
      :If IS181 ⋄ args,←⊂('FireOnce' 1) ⋄ :EndIf
      timer←⎕NEW'Timer'args
    ∇
    TIMER←CreateTimer
    ⍝ There is one message queue per thread for APL events/callbacks
    ⍝ Objects will only see the message queue of the thread that created it (by calling ⎕NEW, ⎕WC, etc.)
    ⍝ When the thread is destroyed ;
    ⍝ - we don't know whether it (hands the queue to the parent thread) or (destroys the queue)
    ⍝ - future events will be passed to the parent thread
    ⍝ The message queue is processed :
    ⍝ - When the thread reaches descalc (size space prompt) (there can only be one thread in descalc at any given time) (unless there is a ⎕DQ on the stack, so while we are tracing)
    ⍝ - its thread is running ⎕DQ


    ∇ {msg}←warn LogCrawler msg;title
    ⍝ Use 1 to warn, 0 to log link-specific events, ¯1 to log crawler-specific events
      title←'⎕SE.Link.Crawler'
      :If (warn=1) ⋄ title ##.U.Warn msg
      :ElseIf (warn=0)∨(LOGCRAWLER∧warn=¯1) ⋄ title ##.U.Log msg
      :EndIf
    ∇

    ∇ {link}←AddCrawler link;args
      :Hold '⎕SE.Link.Crawler'
          ¯1 LogCrawler'Adding link: 'link' to ',LINKS[L_LINK;]
          LINKS,←link NO_ITEMS 1 0
          Crawl link  ⍝ set up
          :If ~TIMER.Active
              ¯1 LogCrawler'Starting timer'
              TIMER.Interval←⌈1000×INTERVAL  ⍝ for ⎕SE.Link.Test to change it
              TIMER.FireOnce←1 ⋄ TIMER.Active←1
          :EndIf
      :EndHold
    ∇
    ∇ {links}←active PauseCrawler links;inx;mask
      :Hold '⎕SE.Link.Crawler'
          :If ∨/mask←LINKS[L_LINK;]∊links
              LINKS[L_ACTIVE;⍸mask]←1 ⍝ update all states when pausing or unpausing
              Crawl¨LINKS[L_LINK;⍸mask]
              LINKS[L_ACTIVE;⍸mask]←mask/active
          :EndIf
      :EndHold
    ∇
    ∇ active←IsCrawlerActive link;mask
      :Hold '⎕SE.Link.Crawler'
          :If ∨/mask←LINKS[L_LINK;]=link ⋄ active←⊃LINKS[L_ACTIVE;⍸mask]
          :Else ⋄ active←0
          :EndIf
     
      :EndHold
    ∇
    ∇ {links}←RemoveCrawler links;msg
      :Hold '⎕SE.Link.Crawler'
          LINKS/⍨←~LINKS[L_LINK;]∊links
          ¯1 LogCrawler(⊂'Removing link: '),links,(⊂' - Remaining links: '),(LINKS[L_LINK;])
          :If 0∊⍴LINKS
              TIMER.Active←0
              ¯1 LogCrawler'Stopped timer'
          :EndIf
      :EndHold
    ∇



    ∇ {msg}←CrawlerEvent msg;laststart;links;mask;ok;start
      :If ##.U.debug=2
          (1+⊃⎕LC)⎕STOP⊃⎕SI
      :EndIf
      :Trap ##.DEBUG↓0
          start←TS ⋄ (laststart LASTSTART)←(LASTSTART start)
          ¯1 LogCrawler'Timer event'
          :If IS181  ⍝ v18.1 has FireOnce property so set it up again
              (⊃msg).FireOnce←1  ⍝ fire once more
          :EndIf
          :If ~IS181  ⍝ v18.1 has FireOnce property so events never pile up
          :AndIf (INTERVAL-GRANULARITY)>(start-laststart)  ⍝ prevent running several events in a row when the queue has piled up
              ¯1 LogCrawler'Event queue overloaded'
          :ElseIf (WORKLOAD×INTERVAL)>(start-LASTEND)  ⍝ prevent spending too much time crawling
              ¯1 LogCrawler'Crawler overloaded: not crawling at all'
          :Else
              :Hold '⎕SE.Link.Crawler' '⎕SE.Link.Notify'
               ⍝ Crawl must call Notify directly for the :Hold to work !
                  :If 1∊mask←LINKS[L_ACTIVE;]
                      Crawl¨links←mask/LINKS[L_LINK;]
                      ⍝ prevent spending too much time crawling
                      ⍝ ns diffs are time-consuming so avoid it if overloaded
                      :If (WORKLOAD×INTERVAL)>(TS-LASTEND)
                          ¯1 LogCrawler'Crawler overloaded: not crawling namespace differences'
                      :Else
                          CrawlNsDiffs¨links
                      :EndIf
                  :EndIf
              :EndHold
          :EndIf
          LASTEND←TS
      :Else
          (⊃msg).Active←0
          ⎕←'Link: Crawler callback internal error - Crawler stopped'
      :EndTrap
    ∇

    ∇ (link items active warned)←GetCrawlerLink link;inx
      :If (⊃⌽⍴LINKS)<inx←LINKS[L_LINK;]⍳link
          'Crawler'##.U.Error'Link not found: ',⍕link
      :EndIf
      (link items active warned)←LINKS[L_LINK L_ITEMS L_ACTIVE L_WARNED;inx]
    ∇
    ∇ {link}←SetCrawlerLink(link items active warned);inx
      :If (⊃⌽⍴LINKS)<inx←LINKS[L_LINK;]⍳link
          'Crawler'##.U.Error'Link not found: ',⍕link
      :ElseIf {(≢¨∪¨⍵)≢(≢¨⍵)}(↓2↑items)~¨⊂⊂''
          'Crawler'##.U.Error'Internal error: non-unique items'
      :EndIf
      LINKS[L_LINK L_ITEMS L_ACTIVE L_WARNED;inx]←(link items active warned)
    ∇

    ∇ {crawled}←Crawl link;active;actname;allfiles;apllist;aplnames;aplnc;aplsrc;changed;changedfiles;changedinx;changednames;changednc;changedsrc;delfiles;delmask;delnames;dirs;expname;filehash;filelist;filemod;filenames;filesrc;inx;items;link2;mask;mat;mewmod;mod;modmask;nc;newfiles;newhash;newmask;newmod;newnames;newnc;newsrc;ns;nsref;oldfiles;oldnames;src;warned;watchdir;watchns;where
    ⍝ crawler must keep track of files changes even if not watching dir, to be able to interpret APL changes correctly
      crawled←0 ⋄ watchdir←'dir' 'both'∊⍨⊂link.watch ⋄ watchns←'ns' 'both'∊⍨⊂link.watch
      (link items active warned)←GetCrawlerLink link
      :If ~active  ⍝ should not happen
          1 LogCrawler'Link not active: '(,⍕link)
          :Return
      :EndIf
      crawled←1 ⋄ nsref←⍎ns←link.ns ⋄ items[I_CHECKED;]←0
      (apllist aplnc)←2↑(0 ##.U.ListLinkedNs ¯1)link  ⍝ do not list root ns - never watch namespace arrays - ignored failed names
      (filelist dirs filemod)←link(0 ##.U.ListFiles 1)link.dir ⋄ filehash←##.U.FileHash¨filelist ⋄ filemod←EncodeTS↑filemod
      (filelist filemod filehash){⍺[⍵]}←⊂⍒dirs ⋄ dirs←(+/dirs)↑filelist ⍝ keep dirs first
      :If 1
      ⍝⍝⍝ Look for creation/deletion of files (modification may be old in case unzipped)
      ⍝ look files before APL because user may have special handling such as "*.charmat" with beforeread/beforewrite, yet without providing proper getFilename
      ⍝ do deletions before creations for rename to work
          oldfiles←items[I_FILE;]
          newfiles←newnames←newnc←newmod←newhash←⍬
          :If 1∊delmask←~oldfiles∊filelist
              delfiles←delmask/oldfiles
              :If watchdir
                  delnames←##.Notify¨{'deleted'⍵}¨⌽delfiles  ⍝ delete directories last
              :EndIf
          :EndIf
          :If 1∊newmask←~filelist∊oldfiles
              (newfiles newmod newhash)←newmask∘/¨(filelist filemod filehash)
              :If watchdir
                  newnames←##.Notify¨{'created'⍵}¨newfiles  ⍝ create directories first
                  newnc←# ##.U.NameClass¨newnames
              :Else
                  (where expname actname newnc)←link ##.U.DetermineAplName newfiles
                  newnames←where ##.U.JoinNames actname
              :EndIf
              (newfiles newnames newnc newmod newhash)/⍨←⊂~(newnc∊0 ¯1)∨(0=≢¨newnames)  ⍝ ignore unidentifiable files
              delmask∨←(items[I_NAME;]∊newnames~⊂'') ⍝ remove previous entries on those names
          :EndIf
          ⍝ update data structures
          (apllist aplnc)/⍨←⊂~apllist∊items[I_NAME;⍸delmask]  ⍝ remove deleted objects for list
          (apllist aplnc),←(newnames newnc)                   ⍝ add created objects to list
          items←((~delmask)/items),↑newfiles newnames newnc((≢newfiles)⍴1)newmod newhash
      :EndIf
      :If watchns
      ⍝⍝⍝ Look for creation/deletion of APL names
      ⍝ names created by file detection won't be created again
          oldnames←items[I_NAME;]
          ⍝ check for deletions
          delmask←~oldnames∊apllist,⊂''   ⍝ files that don't have a proper name (oldname≡'') don't contribute to APL deletions !
          delmask∧←items[I_NC;]≠2.1       ⍝ never watch namespace arrays
          ⍝:If 1∊mask←2.1=items[I_NC;⍸delmask]  ⍝ double-check deletion of variable
          ⍝    delmask∧←delmask\mask\0=#.⎕NC mask/delmask/oldnames    ⍝ variables in directory may not appear in ListLinkedNs - delete only if name class is zero
          ⍝:EndIf
          :If 1∊delmask ⋄ :AndIf watchns
              delfiles←⊃link(1 ##.U.DetermineFileName)((+/delmask)⍴⊂ns)((1+≢ns)↓¨delmask/oldnames)((+/delmask)⍴⊂'')(delmask/items[I_NC;])
              allfiles←4⊃¨5177⌶⍬
              :If 1∊mask←delfiles∊allfiles  ⍝oldfiles∩allfiles  ⍝ some oldfiles still tied - should not happen
                  (mask/delmask/oldnames){1 LogCrawler'Deleted APL item: file still in use: '⍺' → '⍵}¨(mask/delfiles)
              :EndIf
              :If 1∊mask←~mask  ⍝~0∊⍴lostfiles←oldfiles~allfiles  ⍝ delete oldfiles that are not tied to anything
                  (mask/delmask/oldnames){0 LogCrawler'Deleted APL item: '⍺' → '⍵}¨(mask/delfiles)
                  3 ⎕NDELETE⌽(mask/delfiles)  ⍝ delete directories last
              :EndIf
          :EndIf
          ⍝ check for creations
          newnc←newfiles←newnames←newmod←newhash←⍬
          :If 1∊mask←~apllist∊oldnames  ⍝ array creation will never be picked up
              (newnames newnc)←mask∘/¨(apllist aplnc)
              :If ∨/mask←{1=≡⍵}¨newsrc←{nsref ##.U.GetAplSource ⍵ link}¨newnames
                  ¯1 LogCrawler'Failures to get APL source:',⍕mask/newnames
                  (newnames newnc newsrc)/⍨←⊂~mask
              :EndIf
          :AndIf ~0∊⍴newnames
              newfiles←⊃link(1 ##.U.DetermineFileName)((≢newnames)⍴⊂ns)((1+≢ns)↓¨newnames)((≢newnames)⍴⊂'')newnc
              newnames{0 LogCrawler'Created APL item: '⍺' → '⍵}¨newfiles
              newsrc ##.U.Into¨newfiles ⋄ newhash←##.U.FileHash¨newfiles ⋄ newmod←EncodeTS↑3 ⎕NINFO newfiles
              delmask∨←(items[I_FILE;]∊newfiles)  ⍝ remove previous entries on those files - newfiles can never be ''
          :EndIf
          ⍝ update data structure
          (filelist filemod filehash)/⍨←⊂~filelist∊items[I_FILE;⍸delmask]   ⍝ remove deleted files from list
          (filelist filemod filehash),←(newfiles newmod newhash)                    ⍝ add created files to list
          items←((~delmask)/items),↑newfiles newnames newnc((≢newnames)⍴1)newmod newhash
      :EndIf
      :If 1
      ⍝⍝⍝ Look for files (not dirs) with a change of modification timestamp
          changed←filelist∊oldfiles←(~items[I_CHECKED;])/items[I_FILE;]
          :If ~0∊⍴changedfiles←changed/filelist
              changedinx←oldfiles⍳changedfiles
              modmask←((changed/filehash)≢¨items[I_FHASH;changedinx])  ⍝ file hash has changed
              modmask∨←((changed/filemod)≠items[I_FMOD;changedinx])    ⍝ or file modification timestamp has changed
          :AndIf 1∊modmask←modmask∧(¯9.1≠items[I_NC;changedinx])∨(~changedfiles∊dirs)  ⍝ ignore change for dirs that remain dirs
              changednames←##.Notify¨{'changed'⍵}¨modmask/changedfiles
              changednc←# ##.U.NameClass¨changednames
              ⍝ update data structure
              mask←~items[I_NAME;]∊changednames  ⍝ delete entries
              mask[modmask/changedinx]←1         ⍝ excepted self
              mat←↑changednames changednc((+/modmask)⍴1)(modmask/changed/filemod)(modmask/changed/filehash)
              items[I_NAME I_NC I_CHECKED I_FMOD I_FHASH;modmask/changedinx]←mat
              items/⍨←mask
          :EndIf
      :EndIf
      ⍝⍝⍝ Update global data structure
      SetCrawlerLink link items active warned
    ∇

    ∇ {crawled}←CrawlNsDiffs link;active;aplnames;aplsrc;differ;filenames;filesrc;hash;items;mask;mod;nc;notchecked;warned;watchns
      :If crawled←watchns←'ns' 'both'∊⍨⊂link.watch
      ⍝⍝⍝ Look for content difference between APL and files
      ⍝ assume that if file modification timestamp hasn't changed,
      ⍝ then in case of difference the APL side is the "new" one.
      ⍝ this is why we must keep tracking dir even when no watching it
          (link items active warned)←GetCrawlerLink link
          :If ~crawled←active  ⍝ should not happen
              1 LogCrawler'Link not active: '(,⍕link)
              :Return
          :EndIf
          differ←notchecked←⍬
          :If ~0∊⍴items  ⍝ otherwise  items[I_CHECKED;]  may have nested prototype
              mask←~items[I_CHECKED;]     ⍝ items not checked so far
              mask∧←items[I_NC;]≠2.1      ⍝ never watch namespace arrays
              mask∧←0<≢¨aplnames←items[I_NAME;]    ⍝ items that have a valid APL name
              mask∧←0=≢¨# ##.U.CurrentFileName¨aplnames  ⍝ items tied to files will necessarily have matching ⎕SRC/⎕NGET
          :AndIf ~0∊⍴notchecked←⍸mask
              (aplnames filenames)←↓items[I_NAME I_FILE;notchecked]
              aplsrc←{# ##.U.GetAplSource ⍵ link}¨aplnames ⋄ nc←# ##.U.NameClass¨aplnames ⋄ filesrc←##.U.GetFileSource¨filenames
              :If ∨/mask←{1=≡⍵}¨aplsrc ⋄ ¯1 LogCrawler'Failures to get APL source:',⍕mask/aplnames ⋄ :EndIf
              :If ∨/mask←{1=≡⍵}¨filesrc ⋄ ¯1 LogCrawler'Failures to get file source:',⍕mask/filenames ⋄ :EndIf
              mask←~##.U.CompareSource¨aplsrc filesrc nc((⍴filenames)⍴0)            ⍝ items that differ from file definition
              mask∧←nc≠2.1                     ⍝ never watch namespace arrays
              mask∧←⊃∧/~{1=≡⍵}¨¨aplsrc filesrc ⍝ ignore failures to get source on either side (probably a deletion, handled at next crawl)
          :AndIf ~0∊⍴differ←mask/notchecked
              (mask/aplnames){0 LogCrawler'Changed APL item: '⍺' → '⍵}¨(mask/filenames)
              (mask/aplsrc)##.U.Into¨(mask/filenames) ⋄ hash←##.U.FileHash¨mask/filenames ⋄ mod←EncodeTS↑3 ⎕NINFO mask/filenames
              ⍝ update data structure
              items[;differ]←↑(mask/filenames)(mask/aplnames)(mask/nc)((+/mask)⍴1)mod hash
          :EndIf
          SetCrawlerLink link items active warned
      :EndIf
    ∇


:EndNamespace
