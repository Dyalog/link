 {name}←{obj}Notify args;actname;affected;children;curactname;curfile;curname;curnc;curnsname;deleted;dir;expfile;expname;exppath;forcefix;hidden;hold;i;inFail;link;linked;links;msg;nc;nsname;nsref;oldexpname;oldfile;oldname;oldnc;oldnsname;oldnsref;oldpath;parents;path;regex;retry;type;warn;z;⎕IO;⎕ML;fixrc;src
⍝ Notify Link system that an external file has changed
⍝ Usually called by FileSystemWatcher
⍝ returns the name affected by the file
 ⎕IO ⎕ML←1 1
 name←''  ⍝ no apl name
 :Select U.debug
 :Case 1 ⋄ ⍝⎕←'Notify'args  ⍝ no need for this - Notify calls U.Log a lot
 :Case 2 ⋄ (1+⊃⎕LC)⎕STOP⊃⎕SI ⍝ ⋄ ⎕←'Notify'args
 :EndSelect
 :Trap DEBUG↓0
     :If 0=⎕NC 'NOTIFY' ⋄ NOTIFY←0 ⋄ :EndIf ⍝ Does user want confirmation of notifications?

     links←U.ErrorIfRestored U.GetLinks ⍝ never allow file notifications

     hold←~(⊂⊃1↓⎕XSI)∊'⎕SE.Link.Notify' '⎕SE.Link.Watcher.Crawl' '⎕SE.LinkTest.Fix' ⍝ these already have the hold - avoid deadlock
     :Hold hold/'⎕SE.Link.Notify' '⎕SE.Link.Links'
     ⍝ :Hold '⎕SE.Link.Notify' is for functions that may modify files and file associations
     ⍝ :Hold '⎕SE.Link.Links' is just to get the link - we won't modify it - can't really hold it separately because Break/Expunge may have it too which could cause a deadlock

         (type path oldpath forcefix)←{4↑⍵,(≢⍵)↓'' '' '' 0},⊆args ⍝ forcefix used by resync to force a refix of the file
         (path oldpath)←0 U.NormFile¨path oldpath
         deleted←type≡'deleted'

         warn←0 ⋄ msg←type' 'path': '
         :If DEBUG>0 ⋄ :AndIf type≡'renamed'
             msg←(¯1↓msg),'←'oldpath,': '
         :EndIf

         :If 0∊⍴link←U.LookupFile path  ⍝ not linked - should not happen
             :If 900⌶⍬ ⋄ :OrIf 0∊⍴links ⋄ :OrIf obj∊links.fsw
                 warn←1  ⍝ link issue #225
             :EndIf ⍝ otherwise not Link's fault (Mantis 18903)
             →END⊣msg,←⊂'path not in a linked directory'
         :EndIf

         :If 0=⎕NC 'link.singlefile' ⋄ link.singlefile←0 ⋄ :EndIf

         →((⊂link.watch)∊'dir' 'both')↓0 ⍝ Not watching
         ⍝ link←⎕NS link ⋄ link.fastLoad←0  ⍝ fastLoad not observed at Notify time - done by Link.Create

         :If '.'∨.=⊃¨U.SplitDir(≢link.dir)↓path  ⍝ link issue #156 - due to unreliable 6∘⎕NINFO
             →END⊣msg,←⊂'file/directory name has a leading dot'
         :EndIf

         :If ~deleted
             parents←(¯1+≢U.Ancestry link.dir)↓U.Ancestry path
             retry←10 ⍝ occasionnaly, on ⎕NMOVE made by Notify, the watcher rename event will not have access to file for some time
             :While 0≤retry←retry-1
                 :Trap 0
                     dir←1=1 ⎕NINFO path
                     hidden←∨/6 ⎕NINFO parents
                     :Leave
                 :Else ⋄ ⎕DL 0.000001
                 :EndTrap
             :EndWhile
             :If retry<0 ⋄ →END⊣msg,←,⊂'not accessible' ⋄ :EndIf
             :If hidden ⋄ →END⊣msg,←,⊂'hidden' ⋄ :EndIf
         :EndIf  ⍝ dir cannot yet be tested for deleted files

         ⍝ determine expected apl name from file name, and actual apl name from source
         (nsname expname actname nc)←link U.DetermineAplName path
         nsref←#(0 U.GetRefTo)nsname  ⍝ we know nsname is fully qualified

         ⍝ determine current name tied to file (if any)
         (curnsname curactname curnc)←U.CurrentAplName path
         :If deleted  ⍝ can't examine source file - rely on expected apl name
             :If ~curnc∊0 ¯1 ⋄ actname←curactname ⋄ nc←curnc     ⍝ interpreter remembers that name was linked to file
             :ElseIf ~0∊⍴nsref ⋄ nc←nsref U.NameClass actname←expname  ⍝ rely on expected apl name inferred from file name
             :Else ⋄ nc←¯1  ⍝ nsname is invalid - see U.DetermineAplName
             :EndIf ⋄ dir←nc=¯9.1
         :ElseIf 0∊⍴actname ⋄ actname←expname  ⍝ failed to fix source - nc is 0 - only beforeRead can save us
         :EndIf

         oldname←actname
         affected←nsname,'.',actname
         :If curnc=¯1 ⋄ curname←'' ⋄ :Else ⋄ curname←curnsname,'.',curactname ⋄ :EndIf

         :If ~deleted  ⍝ won't read a deleted file
         :AndIf 3=⎕NC link.beforeRead ⍝ user exit defined? - must run BEFORE we exit on invalid file contents
             :If ~(link⍎link.beforeRead)'beforeRead'link path affected(|nc)  ⍝ return 1 to continue else 0
                 name←affected ⋄ →END⊣msg,←⊂'handled by user'
             :EndIf
         :EndIf

         :If dir⍱link U.HasExtn path  ⍝ must be directory or have correct extension
             →END⊣msg,←⊂'file extension not managed by link'
         :ElseIf 0=≢nsref ⋄ warn←1 ⋄ msg,←⊂'unable to find corresponding namespace'
             →(type≢'deleted')×END ⍝ Exit if event was "deleted", else report error
         :ElseIf nc=¯1 ⋄ warn←1 ⋄ →END⊣msg,←'invalid name defined by file: 'path
         :ElseIf (deleted∨~link.fastLoad)∧(nc=0)  ⍝ cannot trust nc returned by DetermineAplName when opts.fastLoad
             warn←~deleted  ⍝ link issue #235 : the delete callback provoked by ⎕SE.Link.Expunge cannot see the expunged name
             →END⊣msg,←⊂(1+deleted)⊃'invalid file contents' 'could not determine which object was linked to it'
         :EndIf

         ⍝ determine current file tied to name we plan to use
         expfile←⊃link(0 U.DetermineFileName)nsname actname oldname nc
         :If 0∊⍴curfile←0 U.NormFile nsref U.CurrentFileName actname ⍝ not tied by interpreter
         :AndIf 2.1 ¯9.1∊⍨nc   ⍝ only arrays and tradnamespaces don't have ties
             curfile←U.Deslash (⎕NEXISTS expfile)/expfile ⍝ ns source may be folder with trailing /
         :EndIf

         name←affected   ⍝ return APL name affected by the Notify

         :Select type

         :Case 'created'               ⍝ A new file
             :If 0≠⎕NC affected    ⍝ object already exists - avoid re-linking when file was copy/pasted
             :AndIf curfile≢path   ⍝ sometimes file writes produce a create event on the same file - let it run
             :AndIf 0<≢curfile     ⍝ otherwise it's a regular file creation
                 warn←1 ⋄ name←'' ⋄ →END⊣msg,←'ignoring attempt to redefine 'affected' which is linked to 'curfile
             :ElseIf ~curnc∊0 ¯1    ⍝ file already tied to another name
                 (⍎curnsname)U.Untie curactname
                 msg,←'creating 'affected' - unlinking previously linked 'curname
             :Else
                 msg,←'creating 'affected
             :EndIf

         :Case 'changed'               ⍝ Update to existing file?
             :If dir ⋄ :AndIf ¯9.1=# U.NameClass affected ⋄ →END⊣msg,←⊂'ignoring change to directory' ⋄ :EndIf
             :If dir ⋄ :AndIf link.flatten ⋄ :AndIf 0=# U.NameClass affected ⋄ →END⊣msg,←⊂'ignoring change to directory' ⋄ :EndIf
             :If path≡curfile      ⍝ name already tied to the same file
                 msg,←'updating previously linked 'affected   ⍝ checking if file is worth refix-ing (hash etc.) will be done in U.QFix
                 :If (0<≢curname)∧(curname≢affected)   ⍝ name changed
                     ⎕EX curname ⋄ msg,←' deleting previously defined 'curname
                 :EndIf
             :ElseIf (0≠⎕NC affected)∧(0≠≢curfile)∧(⎕C curfile)≢⎕C path ⍝ name was tied to a different file
                 warn←1 ⋄ name←'' ⋄ →END⊣msg,←'ignoring attempt to redefine 'affected' which is linked to 'curfile
             :ElseIf ~curnc∊0 ¯1     ⍝ file already tied to a name
                 ⎕EX curname  ⍝ delete name in case the name defined by source has changed
                 msg,←'updating un-linked 'affected', expunging previously linked 'curname
             :ElseIf link.singlefile∧affected≢link.ns
                 msg,←⊂'redirecting single file link from ',link.ns,' to ',affected
                 ⎕EX link.ns
                 link.ns←affected
             :Else
                 msg,←'updating un-linked 'affected
             :EndIf

         :Case 'renamed'
             :If path≡curfile       ⍝ name already tied to the same file - happens when forceFilenames/forceExtensions moves back a file to where it was
                 msg,←,'updating previously linked 'affected
             :ElseIf 0≠⎕NC affected  ⍝ redefining existing name
             :AndIf curfile≢oldpath  ⍝ name not bound to old file (TODO won't work for arrays)
                 warn←1 ⋄ name←'' ⋄ →END⊣msg,←'ignoring attempt to redefine 'affected,(0<≢curfile)/' which is linked to 'curfile
             :EndIf
             :If NOTIFY
                 U.Notify oldpath,' renamed as ',path
             :EndIf

             (oldnsname oldexpname)←2↑link U.DetermineAplName oldpath  ⍝ cannot determine actual name and nameclass because file is gone
             oldname←oldnsname,'.',oldexpname
             :If (9=⎕NC oldnsname)∨(⊂oldnsname)∊,¨'#' '⎕SE'
                 oldnsref←(⍎oldnsname) ⋄ oldnc←oldnsref.⎕NC oldexpname
                 oldfile←oldnsref U.CurrentFileName oldexpname
             :Else ⋄ oldnsref←⎕NULL ⋄ oldnc←¯1 ⋄ oldfile←''
             :EndIf
             :If dir         ⍝ move unscripted ns
                 :If 9=⌊oldnc ⍝ old name is an existing namespace
                     actname nsref.⎕NS''  ⍝ create empty namespace
                     oldnsref.⎕EX oldexpname                        ⍝ expunge old
                     :Trap 0 ⋄ children←⊃⎕NINFO⍠1⊢path,'/*'
                     :Else ⋄ children←0⍴⊂''
                     :EndTrap
                     msg,←'namespace rename 'oldname' → 'affected
                     Notify¨{'changed'⍵}¨children
                 :Else ⋄ warn←1                                    ⍝ no old ns
                     msg,←'namespace 'oldname' not found. Loading 'affected' from 'path
                     :If 0<≢inFail←2⊃link U.FixFiles nsref path 1  ⍝ always overwrite
                         msg,←' - failed to load: '(U.FmtLines inFail)
                     :EndIf
                 :EndIf
                 →END
             :EndIf
             :If ~oldnc∊0 ¯1    ⍝ old apl name must be expunged
                 oldnsref.⎕EX oldexpname
             :EndIf
             :If ~curnc∊0 ¯1     ⍝ new file already tied to a name
                 (⍎curnsname)U.Untie curactname
                 warn←1 ⋄ msg,←'moving 'oldname' to 'affected' - unlinking previously linked 'curname
             :Else
                 msg,←'moving 'oldname' to 'affected
             :EndIf

         :Case 'deleted'
             :If 0=⎕NC affected  ⍝ object didn't exist
                 msg,←'not found: 'affected
             :ElseIf ⎕NEXISTS curfile  ⍝ file still exists - don't expunge
                 name←'' ⋄ →END⊣msg,←'not expunging 'affected' because 'curfile 'still exists'
             :ElseIf (0<≢curfile)∧(path≢curfile)  ⍝ name tied to another file - don't expunge
                 name←'' ⋄ →END⊣msg,←'not expunging 'affected' linked to 'curfile
             :ElseIf (~curnc∊0 ¯1)∧(curname≢affected)     ⍝ a different file was tied to a name
                 (⍎curnsname)U.Untie curactname
                 warn←1 ⋄ msg,←'expunging 'affected' - unlinking previously linked 'curname
             :Else
                 msg,←'expunging 'affected
             :EndIf
             ⎕EX affected
             :If NOTIFY
                 U.Notify 'Deleted ',affected,' (',path,')'
             :EndIf
             →END

         :Else
             msg,←⊂'Unhandled event type'
             name←'' ⋄ →END ⍝ might as well give up now

         :EndSelect

         ⍝ rename files if incorrectly named
         :If link.fastLoad<(link.forceFilenames∨link.forceExtensions) ⍝ fastLoad is disabled in Notify
         :AndIf path≢exppath←expfile(link.forceFilenames U.MergeFileName link.forceExtensions)path
             :If ⎕NEXISTS exppath  ⍝ would clash with existing file - do not dare fixing
             :AndIf (⎕C path)≢⎕C exppath ⍝ Not just a case change
                 warn←1 ⋄ name←'' ⋄ →END⊣msg,←' - file clash: cannot move file to existing 'exppath' - cannot fix 'affected
             :Else
                 msg,←' - moving to 'exppath
                 (,⊂exppath) U.Relocate ,⊂path
                 path←exppath
                 ⍝ If we do the line below, then occasionally the watcher fails to callback on move, making the new file definition not fixed
                 ⍝→END U.If 'dir' 'both'∊⍨⊂link.watch      ⍝ file watcher will take care of the rest
                 :While ~⎕NEXISTS exppath ⋄ ⎕DL 0.000001 ⋄ :EndWhile    ⍝ ensure file effectively moved before fixing
                 :If NOTIFY
                     U.Notify 'Renaming ',path,' to ',exppath
                 :EndIf
             :EndIf
         :EndIf

         ⍝ fix file
         :Select fixrc←nsref U.QFix path actname(U.FixTie link) 1 forcefix
         :Case 1 ⋄ msg,←⊂' - fixed from file'
         :Case 0 ⋄ msg,←⊂' - APL already up to date'
         :Case ¯1 ⋄ warn←1 ⋄ msg,←⊂' - failed to fix file'
         :EndSelect

         :If (nsref.⎕NC actname)∊3 4   ⍝ Fn or Op
         :AndIf 2=⎕NC 'link.flagged'
         :AndIf (⊂actname)∊link.flagged ⍝ Stops or Trace set?
             actname Config.RestoreFlags link
         :EndIf

         :If NOTIFY∧fixrc≠¯1
             src←⊃⎕NGET path
             :If 0=⎕NC 'LASTFIX'
             :OrIf LASTFIX≢(⍕nsref) actname src
                 U.Notify 'Updated ',affected,' (',path,')'
             :EndIf
             LASTFIX←(⍕nsref) actname src
         :EndIf

         END:
         :If warn ⋄ 1 U.Warn msg
         :Else ⋄ 1 U.Log msg
         :EndIf
     :EndHold ⍝ 'Notify'
 :Else
     U.Resignal 1
 :EndTrap
