 msg←{opts}Export args;src;dir;arrays;container;defopts;dir;failed;fixed;nc;ns;ok;single;⎕IO;⎕ML;setconfig;setopts;z;there;ref;nss;links;file;config;rc;merge;json;nsgiven;dest
 ⎕IO ⎕ML←1 1
 preProcessOpts
 (msg setconfig)←Config.GetConfig opts
 →(0≠≢msg)⍴0
 :If 2=DEBUG←{6::0 ⋄ ⍵.Debug.debug}setconfig
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     (container src dir nsgiven)←preProcessNsDir args
     :If ~nsgiven
         src←⍕container
     :EndIf
     (defopts←⎕NS ⍬).overwrite←0

     :If 0≠≢links←U.GetLinks
     :AndIf (⊂src)∊links.ns               ⍝ If exporting a linked namespace
     :AndIf ⎕NEXISTS file←links[links.ns⍳⊂src].dir,'/.linkconfig'
     :AndIf 0=⊃(rc config)←Config.ReadConfigFile file
         opts←opts Config.MergeOpts config ⍝ ... merge settings found in .linkconfig in
     :EndIf

     opts←opts Config.MergeOpts setconfig  ⍝ Finally merge user options in
     'setopts'⎕NS opts ⍝ Record options that were set for writing .linkconfig file
     opts←defopts U.DefaultOpts opts

     :If ~opts.overwrite∊0 1 ⋄ U.Error'Invalid value ',(⍕opts.overwrite),' for modifier "overwrite" - must be one of: 0 1' ⋄ :EndIf

     :If ¯1=nc←container U.NameClass src ⍝ either invalid name or ref to unnamed namespace
         U.Error'Not a properly named namespace: ',,⍕src
     :ElseIf 0=nc
         U.Error'Source not found: ',src
     :ElseIf U.Slash⊃⌽src
         U.Error'Trailing slash reserved for future extension'
     :Else
         :If single←¯9.1≠nc ⋄ :AndIf opts U.HasExtn dir  ⍝ dest is a file
             dir←⊃⎕NPARTS dest←0 U.NormFile dir
         :Else                                            ⍝ dest is a directory
             dir←dest←0 U.NormDir dir
         :EndIf
         :If single
             ns←⊃U.SplitNs src←container U.NormName src  ⍝ single name is relative to calling namespace (container) because there is no implicit namespace
             arrays←1   ⍝ always export single array
         :Else
             ns←src←U.NormNs src                      ⍝ src is an unscripted namespace
         :EndIf

         opts.watch←'none'   ⍝ prevent tying to the files
         opts.source←'ns'
         opts.ns←ns
         opts.dir←dir
         opts.singlefile←0   ⍝ /// until further notice
         opts.ignorecurrent←1
         (fixed failed)←opts U.WriteFiles src dest opts.overwrite

         :If ×≢failed
             msg,←(⊂'ERRORS ENCOUNTERED: ',(⍕≢failed),' export(s) failed:'),failed
         :ElseIf single
             msg←⊂'Exported: ',src,' → ',U.WinSlash fixed
         :Else
             z←⎕NS''
             z.Settings←Config.ExpungeDefaultParams setopts
             z Config.WriteConfig dir,'/.linkconfig'
             msg←⊂'Exported: ',ns,' → ',U.WinSlash dir
         :EndIf
         msg←1↓U.FmtLines msg
     :EndIf
 :Else
     U.Resignal 1
 :EndTrap
