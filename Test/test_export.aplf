 ok←test_export(folder name);ExportCmd;arrays;cmd;foosrc;foosrc2;io;ml;nssrc;nssrc2;opts;ref;subref;varsrc;z;ns
 ref←⍎name ⎕NS''
 varsrc←⎕SE.Dyalog.Array.Serialise ref.var←(2 3 4⍴○⍳100)(5 6⍴⎕A)
 2 ref.⎕FIX foosrc←,¨'     ∇ res  ←foo arg ; local' 'res←''foo''   arg' '∇'
 2 ref.⎕FIX nssrc←,¨'  :Namespace ns' 'where←''ns'' ' ':EndNamespace'
 :If ~⎕SE.Link.U.IS181 ⋄ foosrc←ref.⎕NR'foo' ⋄ :EndIf  ⍝ Dyalog v18.1 can preserve source !
 subref←⍎(name,'.sub')⎕NS''
 subref.(var1 var2 var3 var4)←'VAR1' 'VAR2' 'VAR3' 'VAR4'

 ⍝ Test export of #
 (ns←⎕NS ⍬)NSMOVE # ⍝ Move everything out of # for a moment
 2 #.⎕FIX foosrc
 z←⎕SE.Link.Export # (folder,'-export')
 assert 'foosrc≡⊃⎕NGET (folder,''-export/foo.aplf'')1'
 ⎕EX '#.foo'
 # NSMOVE ns        ⍝ Restore #
 ⎕EX 'ns'
 3 ⎕NDELETE folder,'-export'

 z←⎕SE.Link.Export name folder
 assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 assert'⎕NEXISTS ''',folder,''''
 3 ⎕NDELETE folder ⋄ 3 ⎕MKDIR folder
 (⊂'This is total garbage !!!!!;;;;')⎕NPUT folder,'/garbage.ini'
 z←⎕SE.Link.Export name folder
 'link issue #175'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 assert'foosrc≡⊃⎕NGET ''',folder,'/foo.aplf'' 1'
 assert'nssrc≡⊃⎕NGET ''',folder,'/ns.apln'' 1'
 assert'1=1⎕NINFO ''',folder,'/sub'''
 assert'~⎕NEXISTS ''',folder,'/var.apla'''
 2 ref.⎕FIX foosrc2←,¨'     ∇ res  ←foo arg ; local' 'res←''foo2''   arg' '∇'
 2 ref.⎕FIX nssrc2←,¨'  :Namespace ns' 'where←''ns2'' ' ':EndNamespace'
 :If ~⎕SE.Link.U.IS181 ⋄ foosrc2←ref.⎕NR'foo' ⋄ :EndIf
 'link issue #175'assertError'z←⎕SE.Link.Export name folder' 'Files already exist'
 opts←⎕NS ⍬ ⋄ opts.overwrite←1
 z←opts ⎕SE.Link.Export name folder
 'link issue #175'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 assert'foosrc2≡⊃⎕NGET ''',folder,'/foo.aplf'' 1'
 assert'nssrc2≡⊃⎕NGET ''',folder,'/ns.apln'' 1'
 assert'~⎕NEXISTS ''',folder,'/var.apla'''

 3 ⎕NDELETE folder ⋄ 2 ref.⎕FIX foosrc
 z←⎕SE.Link.Export(name,'.foo')folder
 'link issue #79'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #79'assert'foosrc≡⊃⎕NGET ''',folder,'/foo.aplf'' 1'
 z←⎕SE.Link.Export(name,'.foo')(folder,'/foo')  ⍝ check that destination is always interpreted as directory
 'link issue #79'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #79'assert'foosrc≡⊃⎕NGET ''',folder,'/foo/foo.aplf'' 1'
 z←⎕SE.Link.Export(name,'.foo')(folder,'/foo2.aplf')
 'link issue #79'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #79'assert'foosrc≡⊃⎕NGET ''',folder,'/foo2.aplf'' 1'
 2 ref.⎕FIX foosrc2
 assertError'⎕SE.Link.Export(name,''.foo'')(folder,''/foo2.aplf'')'(⎕SE.Link.U.WinSlash folder,'/foo2.aplf')
 opts.overwrite←1
 z←opts ⎕SE.Link.Export(name,'.foo')(folder,'/foo2.aplf')
 'link issue #79'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #79'assert'foosrc2≡⊃⎕NGET ''',folder,'/foo2.aplf'' 1'

 3 ⎕NDELETE folder ⋄ 2 ref.⎕FIX foosrc
 ExportCmd←{'Link.Export ',(⍺/'-overwrite'),' ',⍵,' ',name,' ',folder}∘{⍵≡0:'' ⋄ ⍵≡1:'-arrays' ⋄ '-arrays=',∊⍵,[1.5]','}
 z←ref.{⎕SE.UCMD ⍵}0 ExportCmd 0
 'link issue #37'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #37'assert'0 0 0 0≡⎕NEXISTS (folder,''/sub/'')∘,¨''var1.apla'' ''var2.apla'' ''var3.apla'' ''var4.apla'''
 cmd←0 ExportCmd arrays←(name,'.sub.var1')('sub.var2')('⎕THIS.sub.##.sub.var3')('NOT_FOUND')('sub.⎕IO')('sub.##.sub.⎕THIS.⎕ML')
      ⍝assertError'z←ref.{⎕SE.UCMD ⍵}cmd' 'Files already exist' 0      ⍝ UCMD may throw nearly any error number
 z←ref.{⎕SE.UCMD ⍵}cmd  ⍝ link issue #217 - UCMD must not error
 assert'∨/''⎕SE.Link.Export: Files already exist:''⍷z'
 z←ref.{⎕SE.UCMD ⍵}1 ExportCmd 1
 'link issue #37'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #37'assert'1 1 1 1 0 0≡⎕NEXISTS (folder,''/sub/'')∘,¨''var1.apla'' ''var2.apla'' ''var3.apla'' ''var4.apla'' ''⎕IO.apla'' ''⎕ML.apla'' '
 3 ⎕NDELETE folder
 z←ref.{⎕SE.UCMD ⍵}0 ExportCmd arrays
 'link issue #37'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #37'assert'1 1 1 0 1 1≡⎕NEXISTS (folder,''/sub/'')∘,¨''var1.apla'' ''var2.apla'' ''var3.apla'' ''var4.apla'' ''⎕IO.apla'' ''⎕ML.apla'' '
 3 ⎕NDELETE folder
 ⎕EX name

 :For io ml :In (0 3)(1 1)
     3 ⎕NDELETE folder
     ⎕EX name
     ref←⍎name ⎕NS ⍬
     ref.⎕FIX':Namespace quadVars' '##.⎕IO←' '##.⎕ML←' ':EndNamespace',¨⍕¨⍬ io ml ⍬
     'sub'ref.⎕NS ⍬
     {}⎕SE.UCMD']link.export ',name,' "',folder,'"'
     ⎕EX name
     {}⎕SE.UCMD']link.import ',name,' "',folder,'"'
     'link issue #223'assert'io ml≡',name,'.(⎕IO ⎕ML)'
     'link issue #223'assert'io ml≡',name,'.sub.(⎕IO ⎕ML)'
     3 ⎕NDELETE folder
     ⎕EX name
 :EndFor

 ok←1
