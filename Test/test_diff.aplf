 ok←test_diff(folder name);diff;exp;filemask;files;folders;garbfiles;namemask;names;namespaces;ns;opts;varfiles;vars;z;newvars;aplvars
 3 ⎕MKDIR folder
 MOCK_OFF←1 ⍝ watch:none
 {}'(watch:''none'')'LinkCreate name folder
 assert'0∊⍴⎕SE.Link.Diff name'
 3 ⎕MKDIR¨folders←folder∘,¨'' '/.hidden' '/sub'
 namespaces←name∘,¨'' '.sub'
 {}(⊂⎕SE.Dyalog.Array.Serialise 1 2 3)∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/var.apla'
 {}(⊂'res←foo arg' 'res←arg')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/foo.aplf'
 {}(⊂':Namespace ns' ':EndNamespace')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/ns.apln'
 {}(⊂'!TOTAL!GARBAGE!;;;')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/garbage.aplf'
 {}(⊂':Namespace garbage' ':EndNamespace')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/garbage.ini'
 files←,⍉(1 0 1/folders)∘.,'/' '/var.apla' '/foo.aplf' '/ns.apln' '/garbage.aplf'
 names←,⍉namespaces∘.,'' '.var' '.foo' '.ns'
 garbfiles←¯2↑files ⋄ vars←2↑2↓names ⋄ varfiles←2↑2↓files
 exp←(⊂''),[1.5]1↓files  ⍝ root namespace was created
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 {}'(source:''dir'')'⎕SE.Link.Refresh name
 exp←(⊂''),[1.5]garbfiles  ⍝ these files will always differ
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 ⎕EX name
 assertError'⎕SE.Link.Diff name' 'Not linked:'

 {}'(watch:''none'')'LinkCreate name folder
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 3 ⎕NDELETE folder
 (aplvars←namespaces,¨⊂'.aplvar'){⍎⍺,'←⍵'}¨⊂(3 2 1)  ⍝ apl-only variables should be ignored
 exp←(names~vars),[1.5](⊂'')
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 {}'(source:''ns'')'⎕SE.Link.Refresh name
 assert'~∨/⎕NEXISTS folders,¨⊂''/var.apla'''  ⍝ refresh doesn't update variables
 assert'0∊⍴⎕SE.Link.Diff name'
 opts←⎕NS ⍬ ⋄ opts.arrays←1
 exp←(vars,aplvars),[1.5](⊂'')  ⍝ force diffing arrays
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}opts ⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 opts.arrays←0
 3 ⎕MKDIR folders
 {}(⊂⎕SE.Dyalog.Array.Serialise 4 5 6)∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/var.apla'
 {}(⊂⎕SE.Dyalog.Array.Serialise 7 8 9)∘{⍺ QNPUT ⍵ 1}¨newvars←folders,¨⊂'/newvar.apla'
 exp←(vars,'' ''),[1.5](varfiles,1 0 1/newvars)  ⍝ arrays with files must always be diffed
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}opts ⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 ⎕NDELETE newvars
 3 ⎕MKDIR folders  ⍝ for hidden folder too
 {}(⊂⎕SE.Dyalog.Array.Serialise 4 5 6)∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/var.apla'
 {}(⊂'res←foo arg' 'res←arg arg')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/foo.aplf'
 {}(⊂,⊂':Namespace ns ⋄ :EndNamespace')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/ns.apln'
 {}(⊂'!TOTAL!GARBAGE!AGAIN!;;;')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/garbage.aplf'
 {}(⊂':Namespace garbage ⋄ :EndNamespace')∘{⍺ QNPUT ⍵ 1}¨folders,¨⊂'/garbage.ini'
 filemask←(~files∊folders,¨'/')∧(~files∊garbfiles)
 namemask←(~names∊namespaces)
 exp←((⊂''),[1.5]garbfiles)⍪((namemask/names),[1.5](filemask/files))
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 exp⍪←aplvars,[1.5]⊂''
 opts.arrays←aplvars
 assert'({⍵[⍋⍵;]}{⍵[;2 3]}opts ⎕SE.Link.Diff name)≡({⍵[⍋⍵;]}exp)'
 {}⎕SE.Link.Break name
 ⎕EX name

 MOCK_OFF←0 ⍝ Normal link coming up

 (ns←⎕NS ⍬)NSMOVE # ⍝ Move everything out of # for a moment
 z←⎕SE.UCMD']link.create # ',folder
 diff←{⍵[;2 3]}#.{⎕SE.Link.Diff ⍵}⍬
 exp←(⊂''),[1.5]folder∘,¨'/garbage.aplf' '/sub/garbage.aplf'
      ⍝ The following line is due to Mantis 18970
 exp⍪←(2×~⎕SE.Link.U.IS181)↓'#.ns' '#.sub.ns' '' '',[1.5]'' '',folder∘,¨'/ns.apln' '/sub/ns.apln'
 assert'({⍵[⍋⍵;]}diff)≡({⍵[⍋⍵;]}exp)'
 {}⎕SE.Link.Break # ⋄ #.⎕EX #.⎕NL-⍳10
 # NSMOVE ns        ⍝ Restore #

 CleanUp folder name
 ok←1
