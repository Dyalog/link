 ok←test_bugs(folder name);engine;foo;newbody;nr;opts;props;ref;root;search;server;src;src2;sub;todelete;unlikelyclass;unlikelyfile;unlikelyname;var;warn;z;f;b
    ⍝ Github issues
 name ⎕NS''
 QMKDIR Retry⊢folder ⍝ folder must be non-existent

          ⍝ link issue #335
 z←name'abc'⎕SE.Link.Fix,⊂'[1⋄2⋄3]'
 'link issue #335'assert'z≡,⊂''abc'''
 'link issue #335'assert'(name⍎''abc'')≡(3 1⍴1 2 3)'
 ⎕EX name,'.abc'

      ⍝ link issue #112 : cannot break an empty link
 z←LinkCreate name folder
 'link issue #112'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 z←⎕SE.Link.Break name ⋄ ⎕EX name
 'link issue #112'assert'(∨/''Unlinked''⍷z)'

      ⍝ link issue #118 : create link in #
 root←⎕NS ⍬ ⋄ root NSMOVE #  ⍝ clear # - prevents using #.SLAVE
 '#.unlikelyname must be non-existent'assert'0∧.=⎕NC''#.unlikelyname'' ''⎕SE.unlikelyname'''
 {}(⊂unlikelyclass←,¨':Class unlikelyname' '∇ foo x' ' ⎕←x' '∇' '∇ goo ' '∇' ':Field var←123' ':EndClass')⎕NPUT unlikelyfile←folder,'/unlikelyname.dyalog'
 z←'(source:''dir'')'LinkCreate # folder
 :If ~0.6∊1||#.⎕NC #.⎕NL-⍳10  ⍝ Options → Configure → Object Syntax → Expose Root Properties
     Log'"Expose Root Properties" not turned on - cannot QA issue #161'
 :EndIf
 'link issue #118 or #161'assert'1=CountLinks'
 'link issue #161'assert'~∨/''not empty''⍷z'
 'link issue #118'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #118'assert'9.4=⎕NC⊂''#.unlikelyname'''
 z←⎕SE.Link.Break #
 assert'{6::1 ⋄ 0=CountLinks}⍬'
 ⎕EX'#.unlikelyname'
 # NSMOVE root ⋄ ⎕EX'root' ⍝ put back #

 z←LinkCreate(name,'.⎕THIS')folder
 'link issue #145'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #145'assert'1=CountLinks'
 z←LinkCreate('⎕THIS.',name,'.sub')folder
 'link issue #145'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #145'assert'2=CountLinks'
 :Trap ⎕SE.Link.U.ERRNO
     {}⎕SE.Link.Break name  ⍝ must error because of linked children
     assert'0'
 :Else
     assert'∨/''Cannot break children''⍷⊃⎕DM'
 :EndTrap
 {}'(recursive:''off'')'⎕SE.Link.Break name  ⍝ break only name and not children
 assert'1=CountLinks'  ⍝ children remains
 z←'(recursive:''off'')'⎕SE.Link.Break name
 assert'1=CountLinks'
 z←'(recursive:''on'')'⎕SE.Link.Break name
 assert'{6::1 ⋄ 0=CountLinks}⍬'
 ⎕EX name

      ⍝ link issue #204
 z←LinkCreate name folder
 'link issue #204'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #204'assert'1=CountLinks'
 ⎕EX name
 z←LinkCreate'#.unlikelyname'folder
 'link issue #204'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #204'assert'1=CountLinks'
 {}⎕SE.Link.Expunge'#.unlikelyname'
 'link issue #204'assert'{6::1 ⋄ 0=CountLinks}⍬'

      ⍝ link issue #284 : ]link.break -all should close links under #
      ⍝ previously #111 stated it should close ALL links
 '⎕SE.unlikelyname must be non-existent'assert'0=⎕NC''⎕SE.unlikelyname'''
 z←LinkCreate'⎕SE.unlikelyname'folder
 z←LinkCreate'#.unlikelyname'folder
 z←LinkCreate'#.unlikelyname.sub'folder
 assert'3=CountLinks'
 props←'Namespace' '' 'Source' 'Files'
 z←{(~⍵[;1]∊IGNORE_LINKS)⌿⍵}⎕SE.Link.Status ''
 'link issue #142'assert'(props⍪ ''⎕SE.unlikelyname'' ''#.unlikelyname'' ''#.unlikelyname.sub'',3 3⍴''←→'' folder 1)≡z'
 z←{(~⍵[;1]∊IGNORE_LINKS)⌿⍵}⎕SE.Link.Status ⎕SE
 'link issue #142'assert'(props,[.5] ''⎕SE.unlikelyname'' ''←→'' folder 1 )≡z'

 {}'(all:1)'⎕SE.Link.Break ⍬
 'link issue #284'assert'{6::1 ⋄ (⎕SE.Link.Links.ns~IGNORE_LINKS)≡,⊂''⎕SE.unlikelyname''}⍬'
 :If ~TESTS_LINKED
    {}'(all:''⎕SE'')'⎕SE.Link.Break ⍬
    'link issue #284'assert'{6::1 ⋄ 0=CountLinks}⍬'
 :Else
    Log 'Not testing "]link.break -all=⎕SE" because ',(⍕⎕THIS),' is linked'
 :EndIf

 ⎕EX'⎕SE.unlikelyname' '#.unlikelyname'
 z←LinkCreate'⎕SE.unlikelyname'folder
 z←LinkCreate'#.unlikelyname'folder
 z←LinkCreate'#.unlikelyname.sub'folder
 assert'3=CountLinks'
 {}'(recursive:''on'')'⎕SE.Link.Break'#.unlikelyname'
 'link issue #111'assert'1=CountLinks'
 {}⎕SE.Link.Break'⎕SE.unlikelyname'
 'link issue #111'assert'{6::1 ⋄ 0=CountLinks}⍬'
 ⎕EX'⎕SE.unlikelyname' '#.unlikelyname'


      ⍝ link issue #117 : leave trailing slash in dir
      ⍝ superseeded by issue #146 when trailing slash was disabled altogether
 'link issue #146'assertError'LinkCreate name(folder,''/'')' 'Trailing slash reserved'
 'link issue #146'assert'{6::1 ⋄ 0=CountLinks}⍬'
 z←LinkCreate name folder
 'link issue #117'assert'1=CountLinks'
 'link issue #117'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
     ⍝ link issue #116 : ⎕SE.Link.Refresh should not error when given a dir
 z←⎕SE.Link.Refresh folder
 'link issue #117'assert'∨/''Not linked''⍷z'
 z←⎕SE.Link.Refresh name
 assert'⊃''Imported:''⍷z'
 assert'~∨/''ERRORS ENCOUNTERED''⍷z'

      ⍝ link issue #109 : fixing invalid function makes it disappear
 unlikelyname←name,'.unlikelyname' ⋄ newbody←'unlikelyname x;' '⎕←x'
 'link issue #109'assertError('name ''unlikelyname''⎕SE.Link.Fix newbody ')('Invalid source')
 'link issue #109'assert'unlikelyclass≡⊃⎕NGET unlikelyfile 1'    ⍝ changes not put back to file
 'link issue #109'assert'unlikelyclass≡⎕SRC ⍎unlikelyname'         ⍝ fix failed
 'link issue #109'assert'unlikelyfile≡4⊃5179⌶ name,''.unlikelyname''' ⍝ still tied

      ⍝ link issue #108 : UCMD returned empty
 'link issue #108'assert'(⎕SE.UCMD '']Link.GetFileName '',unlikelyname)≡,⊂⎕SE.Link.GetFileName unlikelyname'
 {}⎕SE.Link.Break name ⋄ ⎕EX name

 opts←⎕NS ⍬
 opts.watch←'dir'
 opts.typeExtensions←↑(2 'myapla')(3 'myaplf')(4 'myaplo')(9.1 'myapln')(9.4 'myaplc')(9.5 'myapli')
 (⊂newbody)⎕NPUT unlikelyfile 1  ⍝ make it invalid source
 z←opts LinkCreate name folder
 assert'∧/∨/¨''ERRORS ENCOUNTERED'' (⎕SE.Link.U.WinSlash unlikelyfile)⍷¨⊂z'
 name⍎'var←1 2 3'
 z←⎕SE.Link.Add name,'.var'
 'link issue #458'assert'~⎕NEXISTS folder,''/var.myapla'''
 z←⎕SE.Link.Expunge name,'.var'
 assert'(z≡1)∧(0=⎕NC name,''.var'')'  ⍝ variable effectively expunged
 {}⎕SE.Link.Break name ⋄ ⎕EX name ⋄ 3 ⎕NDELETE folder

      ⍝ link issue #207
 3 ⎕MKDIR folder
 (⊂';some text')⎕NPUT folder,'/config.ini'  ⍝ should be ignored
 (warn ⎕SE.Link.U.WARN)←(⎕SE.Link.U.WARN 1) ⋄ ⎕SE.Link.U.WARNLOG/⍨←0
 {}LinkCreate name folder
 (⊂';some new text')⎕NPUT(folder,'/config.ini')1  ⍝ should be ignored
 Breathe ⍝ allow notify to run before the break
 {}⎕SE.Link.Expunge name ⋄ 3 ⎕NDELETE folder
 'link issue #207'assert'0=≢⎕SE.Link.U.WARNLOG'
 ⎕SE.Link.U.WARN←warn

      ⍝ rebuild a namespace from scratch
 (name,'.sub')⎕NS ⍬
 :For sub :In name∘,¨'' '.sub'
     ⍎sub,'.var←',⍕var←1 2 3 4
     (⍎sub).⎕FX nr←' r←foo r ⍝' ' r←r'  ⍝ link issue #244 : trailing '⍝'
     (⍎sub).⎕FIX src←,¨':Namespace script' '∇ res←function arg' 'res←arg' '∇' '∇ goo' '∇' 'var←123' ':EndNamespace'
 :EndFor

 RDFILES←RDNAMES←WRFILES←WRNAMES←⍬
 opts←⎕NS ⍬
 opts.beforeRead←TESTNS,'.beforeReadAdd'
 opts.beforeWrite←TESTNS,'.beforeWriteAdd'

      ⍝ TODO allow exporting variables ?
 {}opts ⎕SE.Link.Export name folder
 'link issue #21'assert'WRFILES ≡ folder∘,¨''/foo.aplf''  ''/script.apln'' ''/sub/'' ''/sub/foo.aplf''  ''/sub/script.apln'' '
 'link issue #21'assert'WRNAMES ≡ name∘,¨''.foo''  ''.script'' ''.sub'' ''.sub.foo''  ''.sub.script'' '
 'link issue #21'assert'0∊⍴RDFILES,RDNAMES'
 WRFILES←WRNAMES←⍬
 ⎕EX name

 (⊂⍕var)⎕NPUT folder,'/var.apla'
 (⊂⍕var)⎕NPUT folder,'/sub/var.apla'
 z←opts ⎕SE.Link.Import name folder
 'link issue #244'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
      ⍝'link issue #68'assert'RDFILES ≡ folder∘,¨''/''  ''/sub/''  ''/foo.aplf''  ''/script.apln''  ''/sub/foo.aplf''  ''/sub/script.apln'' ''/sub/var.apla'' ''/var.apla'' '
      ⍝'link issue #68'assert'RDNAMES ≡ name∘,¨''''  ''.sub''  ''.foo''  ''.script''  ''.sub.foo''  ''.sub.script'' ''.sub.var'' ''.var'' '
 'link issue #68'assert'RDFILES ≡ folder∘,¨''/''    ''/foo.aplf'' ''/script.apln'' ''/sub/'' ''/sub/foo.aplf''  ''/sub/script.apln'' ''/sub/var.apla'' ''/var.apla'' '
 'link issue #68'assert'RDNAMES ≡ name∘,¨''''   ''.foo''  ''.script'' ''.sub'' ''.sub.foo'' ''.sub.script'' ''.sub.var'' ''.var'' '
 'link issue #68'assert'0∊⍴WRFILES,WRNAMES'
 ⎕EX name

      ⍝ .apln must clash with directory of the same name
 {}(⊂':Namespace sub' ':EndNamespace')QNPUT folder,'/sub.apln'
 assertError'z←LinkCreate name folder' 'clashing APL names'
 ⎕NDELETE folder,'/sub.apln'

      ⍝ attempt to change a function to an operator
 {}LinkCreate name folder
 name'foo'⎕SE.Link.Fix foo←' r←(op foo)arg' ' r←op arg' ⍝ turn foo into an operator
 Breathe
 {}(folder,'/foo.aplo')QNMOVE folder,'/foo.aplf'
 Breathe
 'link issue #142'assert'(props,[.5]name ''←→'' folder 7)≡⎕SE.Link.Status name'

      ⍝ attempt to create invalid directory
 (warn ⎕SE.Link.U.WARN)←(⎕SE.Link.U.WARN 1) ⋄ ⎕SE.Link.U.WARNLOG/⍨←0
 3 QMKDIR folder,'/New directory (1)/'
 'link issue #183'assert'~0∊⍴''invalid name defined by file''⎕S ''\0''⊢⎕SE.Link.U.WARNLOG'
 ⎕SE.Link.U.WARN←warn
 3 ⎕NDELETE folder,'/New directory (1)/'

      ⍝ attempt to rename a script
 src2←,¨':Namespace script2' '∇ res←function2 arg' 'res←arg' '∇' ':EndNamespace'
 {}(⊂src2)QNPUT(folder,'/script.apln')1
 'link issue #36'assert'0=⎕NC ''',name,'.script'''
 'link issue #36'assert'src2≡⎕SRC ',name,'.script2'
 {}(⊂src)QNPUT(folder,'/script.apln')1
 'link issue #36'assert'0=⎕NC ''',name,'.script2'''
 'link issue #36'assert'src≡⎕SRC ',name,'.script'

 z←⎕SE.Link.GetFileName 1 NSTREE name
 'link issue #128'assert'({⍵[⍋⍵]}z)≡({⍵[⍋⍵]} 1 NTREE folder)'
 z←⎕SE.Link.GetItemName f←1 NTREE folder
 'link issue #128'assert'({⍵[⍋⍵]}z)≡({⍵[⍋⍵]} 1 NSTREE name)'
 :If ⎕SE.Link.U.ISWIN
     b←('/' ⎕R '\\')f ⍝ file names with backslashes
     'link issue #482' assert 'z≡⎕SE.Link.GetItemName b'
 :EndIf
 z←⎕SE.Link.GetFileName'⎕SE.nope' '⎕SE.nope.nope',name∘,¨'.nope' '.sub.nope' '.nope.nope'
 z,←⎕SE.Link.GetItemName'/nope.aplf' '/nope/nope.aplf',folder∘,¨'/nope.nope' '/sub/nope.nope' '/nope/nope.nope'
 assert'∧/z≡¨⊂'''' '

      ⍝ add some sysvars
 name⍎'⎕IO←⎕ML←0'
 z←⎕SE.Link.Add(name,'.⎕IO')(name,'.⎕ML')
 'link issue #184'assert'1 0≡(∨/''Added:''⍷z)(∨/''Not found:''⍷z)'
 'link issue #184'assert'1 1 0 0≡⎕NEXISTS folder∘,¨''/⎕IO.apla'' ''/⎕ML.apla'' ''/⎕RL.apla'' ''/⎕CT.apla'' '
 z←⎕SE.Link.Add(name,'.⎕WSID')(name,'.⎕PATH')
 'link issue #184'assert'0 1≡(∨/''Added:''⍷z)(∨/''Not found:''⍷z)'
 'link issue #184'assert'0 0≡⎕NEXISTS folder∘,¨''/⎕WSID.apla'' ''/⎕PATH.apla'' '

      ⍝ attempt to write control characters
 :Trap 0
     name'foo'⎕SE.Link.Fix'res←(op foo)arg'('res←''',(⎕UCS 10),''',arg')
     'link issue #151'assert'0'
 :Else
     'link issue #151'assert'∨/''cannot have newlines''⍷⊃⎕DM'
 :EndTrap
 'link issue #151'assert'foo≡⎕NR ''',name,'.foo'''

      ⍝ link issue #205 - check round-trip of arrays - unfortunately the limit error was fixed with issue #255
      ⍝name⍎'limit_error←⍉(9⍴3)⊤⍳3*9'
      ⍝'link issue #205'assertError('⎕SE.Link.Add ''',name,'.limit_error'' ')'Cannot round-trip serialisation of array'
 name⍎'domain_error←,⎕NEW⊂''Timer'''
 'link issue #205'assertError('⎕SE.Link.Add ''',name,'.domain_error'' ')'Array cannot be serialised'

      ⍝ attempt to refresh
 ⎕SE.UCMD'z←]link.refresh ',name
 'link issue #132 and #133'assert'⊃''Imported:''⍷z'
 {}⎕SE.Link.Break name
 :If ~0∊⍴5177⌶⍬ ⋄ :AndIf ⎕SE∨.≠{⍵.##}⍣≡⊢2⊃¨5177⌶⍬
     assert'0'  ⍝ no more links in #
 :EndIf
 ⎕EX name

      ⍝ attempt to recover the source after deletion when not watching the directory
 opts←⎕NS ⍬
 opts.watch←'ns'
 {}(⊂todelete←':Namespace todelete' 'todelete←1' ':EndNamespace')QNPUT(folder,'/todelete.apln')1
 z←opts LinkCreate name folder
 'link issue #184'assert'0 0≡name⍎''⎕IO ⎕ML'''

 'link issue #140'assert'todelete≡⎕SRC ',name,'.todelete'
 ⎕NDELETE folder,'/todelete.apln'
 Breathe ⋄ Breathe
 'link issue #140'assert'todelete≡⎕SRC ',name,'.todelete' ⍝ source still available
 ⎕SE.Link.Expunge name,'.todelete'
 (⍎name).{⎕THIS.jsondict←⎕SE.Dyalog.Array.Deserialise ⍵}'(var:42 ⋄ list:1 2 3)'  ⍝ ⎕JSON'{"var":42,"list":[1,2,3]}' hits Mantis 18652
      ⍝'link issue #177'assertError'z←(⍎name).{⎕SE.UCMD''z←]Link.Add jsondict.list''}⍬'('Not a properly named namespace')0 ⍝ UCMD may trigger any error number
 z←(⍎name).{⎕SE.UCMD']Link.Add jsondict.list'}⍬
 'link issue #177'assert'∨/''⎕SE.Link.Add: Not a properly named namespace:''⍷z'  ⍝ link issue #217 - UCMD must not error

 ⎕EX name,'.jsondict'
 {}⎕SE.Link.Break name
 :If ~0∊⍴5177⌶⍬ ⋄ :AndIf ⎕SE∨.≠{⍵.##}⍣≡⊢2⊃¨5177⌶⍬
     assert'0'  ⍝ no more links in #
 :EndIf

      ⍝ attempt to export
 3 ⎕NDELETE folder
 (⍎name).⎕FX'res←failed arg'('res←''',(⎕UCS 13),''',arg')
 ⎕SE.UCMD'z←Link.Export ',name,' ',folder
 'link issue #151'assert'∧/∨/¨''ERRORS ENCOUNTERED:'' ''',name,'.failed''⍷¨⊂z'
 'link issue #131'assert'({⍵[⍋⍵]}1 NTREE folder)≡{⍵[⍋⍵]}folder∘,¨''/sub/'' ''/sub/foo.aplf''  ''/foo.aplo'' ''/script.apln'' ''/sub/script.apln'' '

      ⍝ link issue #159 - using casecode from namespace
 3 ⎕NDELETE folder
 root←⎕NS ⍬ ⋄ root NSMOVE #  ⍝ clear # - prevents using #.SLAVE
 #.⎕FX'UnlikelyName' '⎕←''UnlikelyName'''
 ⎕SE.UCMD'z←link.create -casecode # "',folder,'"'
 'link issue #159'assert'1=CountLinks'
 'link issue #159'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #159'assert'(,⊂folder,''/UnlikelyName-401.aplf'')≡0 NTREE folder'
 'link issue #177'assert'~⎕NEXISTS ''',folder,'/jsondict/list.apla'''
 #.jsondict←#.⎕JSON'{"var":42,"list":[1,2,3]}'
      ⍝'link issue #177'assertError'#.{⎕SE.UCMD''z←]Link.Add jsondict.list''}⍬' 'Not a properly named namespace' 0  ⍝ UCMD may trigger any error number
 z←#.{⎕SE.UCMD']Link.Add jsondict.list'}⍬
 'link issue #177'assert'∨/''⎕SE.Link.Add: Not a properly named namespace:''⍷z'  ⍝ link issue #217 - UCMD must not error
 ⎕EX'#.jsondict' ⋄ '#.jsondict'⎕NS'' ⋄ #.jsondict.(var list)←42(1 2 3)
 z←#.{⎕SE.UCMD']Link.Add jsondict.list'}⍬
 'link issue #177'assert'⎕NEXISTS ''',folder,'/jsondict-0/list-0.apla'''
 z←⎕SE.Link.Break #
 assert'{6::1 ⋄ 0=CountLinks}⍬'
 ⎕EX'#.UnlikelyName' '#.jsondict'
 3 ⎕NDELETE folder,'/jsondict-0'
 # NSMOVE root ⋄ ⎕EX'root' ⍝ put back #

      ⍝ link issue #235
 {}(⊂':Namespace ns' ':EndNamespace')QNPUT(folder,'/ns.apln')0
 (warn ⎕SE.Link.U.WARN)←(⎕SE.Link.U.WARN 1) ⋄ ⎕SE.Link.U.WARNLOG/⍨←0
 ⎕EX name
 {}LinkCreate name folder
 'link issue #235'assert'9.1=⎕NC⊂''',name,'.ns'''
 ⎕SE.Link.Expunge name,'.ns'
 Breathe
 'link issue #235'assert'0∊⍴⎕SE.Link.U.WARNLOG'
 ⎕SE.Link.U.WARN←warn
 {}⎕SE.Link.Break name

 :If ⎕SE.Link.U.IS181 ⍝ link issue #155 - :Require doesn't work - ensure we have dependecies in both alphabetic orders
     ⎕EX name
     {}(⊂server←':Require file://Engine.apln' ':Namespace  Server' ' dup ← ##.Engine.dup' ':EndNamespace')QNPUT(folder,'/Server.apln')1
     {}(⊂engine←':Namespace  Engine' ' dup ← {⍵ ⍵}' ':EndNamespace')QNPUT(folder,'/Engine.apln')1
     {}(⊂master←':Require file://Slave.apln' ':Namespace  Master' ' dup ← ##.Slave.dup' ':EndNamespace')QNPUT(folder,'/Master.apln')1
     {}(⊂slave←':Namespace  Slave' ' dup ← {⍵ ⍵}' ':EndNamespace')QNPUT(folder,'/Slave.apln')1
     z←LinkCreate name folder
     'link issue #155'assert'1=CountLinks'
     'link issue #155'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
     'link issue #155'assert' ''Engine'' ''Master''  ''Server'' ''Slave'' ''UnlikelyName'' ≡ (⍎name).⎕NL -⍳10'
     'link issue #155'assert'(1↓server)≡⎕SRC ',name,'.Server'    ⍝ :Require statement missing from ⎕SRC but shown in editor
     'link issue #155'assert'(1↓master)≡⎕SRC ',name,'.Master'    ⍝ :Require statement missing from ⎕SRC but shown in editor
     'link issue #155'assert'(engine)≡⎕SRC ',name,'.Engine'
     'link issue #155'assert'(slave)≡⎕SRC ',name,'.Slave'
     {}⎕SE.Link.Break name
 :EndIf

      ⍝ #282 Create" does not work when "arrays" carries unqualified name(s)
      ⍝ #309 Invalid variable names are not handled correctly
 ⎕EX name
 ref←⍎name ⎕NS ⍬
 ref.(msg1 msg2 msg3)←'hello' 'world' '!!!'
 ref.(dot←{⍺←⍵ ⋄ ⍺+.×+⍵})
 3 ⎕NDELETE folder
 opts←⎕NS ⍬
 opts.arrays←,⊂'msg1,',name,'.msg2,⎕IO,',name,'.⎕ML'
 z←opts LinkCreate name folder
 'link issue #282'assert'~∨/''ERRORS ENCOUNTERED''⍷z'
 'link issue #282'assert'1 1 0≡⎕NEXISTS ',⍕Stringify¨folder∘{⍺,'/msg',⍵,'.apla'}¨'123'
 'link issue #309'assert'1 1 0≡⎕NEXISTS ',⍕Stringify¨folder∘{⍺,'/',⍵,'.apla'}¨'⎕IO' '⎕ML' '⎕WX'
 {}⎕SE.Link.Break name

 opts.arrays←('wh!at')(name,'.!#')(name,'.''hello''')(name,'.dot')(name)
 3 ⎕NDELETE folder
 ⎕SE.Link.U.WARNLOG/⍨←0
 z←opts LinkCreate name folder
 'link issue #309'assert'1=≢⎕SE.Link.U.WARNLOG'
 search←(⊂'-arrays modifier: Non-array names ignored'),opts.arrays
 'link issue #309'assert'(⎕IO-⍨⍳≢search)≡{⍵[⍋⍵]}search ⎕S 3⊢ ⎕SE.Link.U.WARNLOG'
 {}⎕SE.Link.Break name

 CleanUp folder name
 ok←1
